import numpy as np

# Basic Parameters
g = 9.8              # gravity, m/s


# Aerodynamic coefficients

# Parameters
m       = 13.5          # mass, kg
Jx      = 0.8244        # Component of Inertia matrix, kg-m**2
Jy      = 1.135         # Component of Inertia matrix, kg-m**2
Jz      = 1.759         # Component of Inertia matrix, kg-m**2
Jxz     = 0.1204        # Component of Inertia matrix, kg-m**2
S       = 0.55          # Platform area of the MAV wing, m**2
b       = 2.8956        # Wingspan of aricraft, m
c       = 0.18994       # Mean chord of MAV wing, m
Sprop   = 0.2027        # The area swept out by the propeller, m**2
rho     = 1.2682        # Air density, kg/m**3
kmotor  = 80.0          # Maximum exit airspeed that leaves the propellers
k_T_p   = 0.0           # Coefficient used to determine the torque that is opposite to the direction of the propeller rotation
k_Omega = 0.0           # Coefficient used to determine the torque that is opposite to the direction of the propeller rotation. Relates
                        # Throttle to propeller rotational speed
e       = 0.9           # 

# Longitudinal Coefficients
# m - longitudinal
C_L_0       = 0.28       # Lift coefficient when alpha = q = beta = 0
C_D_0       = 0.03       # Drag coefficient
C_m_0       = -0.02338
C_L_alpha   = 3.45       # Stability derivative
C_D_alpha   = 0.30
C_m_alpha   = -0.38      # Stability derivative
C_L_q       = 0.0        # Stability derivative
C_D_q       = 0.0
C_m_q       = -3.6       # Stability derivative
C_L_delta_e = -0.36      # Control derivative
C_D_delta_e = 0.0
C_m_delta_e = -0.5       # Primary control derivative
Cprop       = 1.0
M           = 50.0
alpha_0     = 0.4712
epsilon     = 0.1592
C_D_p       = 0.0437     # Parasitic drag, generated by air moving across the wing
C_n_delta_r = -0.032     # Primary control derivative

# Lateral Coefficients
# ell - roll, n- yaw 
C_Y_0         = 0.0      # Value of the lateral force coefficient, C_Y, when beta = p = r = delta_a = 0
C_ell_0       = 0.0      # Value of the lateral force coefficient, C_ell, when beta = p = r = delta_a = 0
C_n_0         = 0.0      # Value of the lateral force coefficient, C_n, when beta = p = r = delta_a = 0
C_Y_beta      = -0.98
C_ell_beta    = -0.12    # Stability derivative
C_n_beta      = 0.25     # Stability derivative
C_Y_p         = 0.0
C_ell_p       = -0.26    # Stability derivative
C_n_p         = 0.022
C_Y_r         = 0.0
C_ell_r       = 0.14
C_n_r         = -0.35    # Stability derivative
C_Y_delta_a   = 0.0
C_ell_delta_a = 0.08     # Primary control derivative
C_n_delta_a   = 0.06     # Cross control derivative
C_Y_delta_r   = -0.17
C_ell_delta_r = 0.105    # Cross control derivative

# Inertia Matrix Coefficients
Gamma = Jx*Jz-Jxz**2.0
Gamma1 = Jxz*(Jx-Jy+Jz)/Gamma
Gamma2 = (Jz*(Jz-Jy)+Jxz**2.0)/Gamma
Gamma3 = Jz/Gamma
Gamma4 = Jxz/Gamma
Gamma5 = (Jz-Jx)/Jy
Gamma6 = Jxz/Jy
Gamma7 = ((Jx-Jy)*Jx + Jxz**2.0)/Gamma
Gamma8 = Jx/Gamma

# Other Coefficients
C_p_0 = Gamma3*C_ell_0 +Gamma4*C_n_0
C_p_beta = Gamma3*C_ell_beta + Gamma4*C_n_beta
C_p_p = Gamma3*C_ell_p + Gamma4*C_n_p
C_p_r = Gamma3*C_ell_r + Gamma4*C_n_r
C_p_delta_a = Gamma3*C_ell_delta_a + Gamma4*C_n_delta_a
C_p_delta_r = Gamma3*C_ell_delta_r + Gamma4*C_n_delta_r

C_r_0 = Gamma4*C_ell_0 +Gamma8*C_n_0
C_r_beta = Gamma4*C_ell_beta + Gamma8*C_n_beta
C_r_p = Gamma4*C_ell_p + Gamma8*C_n_p
C_r_r = Gamma4*C_ell_r + Gamma8*C_n_r
C_r_delta_a = Gamma4*C_ell_delta_a + Gamma8*C_n_delta_a
C_r_delta_r = Gamma4*C_ell_delta_r + Gamma8*C_n_delta_r


# I have verified the params file
if __name__ == "__main__": 
    print('Gamma', Gamma)
    print('Gamma1', Gamma1)
    print('Gamma2', Gamma2)
    print('Gamma3', Gamma3)
    print('Gamma4', Gamma4)
    print('Gamma5', Gamma5)
    print('Gamma6', Gamma6)
    print('Gamma7', Gamma7)
    print('Gamma8', Gamma8)

    print('C_p_0', C_p_0)
    print('C_p_beta', C_p_beta)
    print('C_p_p', C_p_p)
    print('C_p_r',C_p_r)
    print('C_p_delta_a', C_p_delta_a)
    print('C_p_delta_r', C_p_delta_r)

    print('C_r_0', C_r_0)
    print('C_r_beta', C_r_beta)
    print('C_r_p', C_r_p)
    print('C_r_r',C_r_r)
    print('C_r_delta_a', C_r_delta_a)
    print('C_r_delta_r', C_r_delta_r)

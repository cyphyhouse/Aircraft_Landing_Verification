import numpy as np 
import matplotlib.pyplot as plt 


ground_truth_position = np.load('/home/lucas/Research/VisionLand/Aircraft_Landing/catkin_ws/src/landing_devel/ground_truth.npy', allow_pickle=True)
estimate_pos = np.load('/home/lucas/Research/VisionLand/Aircraft_Landing/catkin_ws/src/landing_devel/estimation.npy', allow_pickle=True)
ref_states = np.load('/home/lucas/Research/VisionLand/Aircraft_Landing/catkin_ws/src/landing_devel/ref_states.npy', allow_pickle=True)
averaged_states = np.load('/home/lucas/Research/VisionLand/Aircraft_Landing/catkin_ws/src/landing_devel/averaged_states.npy', allow_pickle=True)
print(len(ground_truth_position), len(estimate_pos))

ground_truth_position = np.array(ground_truth_position)
estimate_pos = np.array(estimate_pos).squeeze()
ref_states = np.array(ref_states)
# plt.figure()
# plt.plot(np.linalg.norm(ground_truth_position-estimate_pos, axis=1), label='Errors')
# plt.xlabel('Time step', fontsize=20)
# plt.ylabel('Estimation error', fontsize=20)
# plt.legend()
# plt.savefig('estimation_comparison_error.png')

# font = {'family': 'serif', 'weight': 'normal', 'size': 12}

# plt.figure()
# plt.plot(ground_truth_position[:,0], 'g', label='Ground Truth')
# plt.plot(estimate_pos[:,0], 'b', label='Estimation')
# # plt.ylim([])
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('X coordinate (m)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_comparison_x.png', dpi=300)

# font = {'family': 'serif', 'weight': 'normal', 'size': 12}
# plt.figure()
# plt.plot(np.abs(estimate_pos[:,0] - ground_truth_position[:,0]), label='Errors')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('X estimation error (m)', fontdict=font)
# plt.legend(prop={'family': 'serif'})yaw
# plt.savefig('estimation_x_error.png', dpi=300)

# plt.figure()
# plt.plot(ground_truth_position[:,1], 'g', label='Ground Truth')
# plt.plot(estimate_pos[:,1], 'b', label='Estimation')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Y coordinate (m)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_comparison_y.png', dpi=300)

# plt.figure()
# plt.plot(np.abs(estimate_pos[:,1] - ground_truth_position[:,1]), label='Errors')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Y estimation error (m)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_y_error.png', dpi=300)

# plt.figure()
# plt.plot(ground_truth_position[:,2], 'g', label='Ground Truth')
# plt.plot(estimate_pos[:,2], 'b', label='Estimation')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Z coordinate (m)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_comparison_z.png', dpi=300)

# plt.figure()
# plt.plot(np.abs(estimate_pos[:,2] - ground_truth_position[:,2]), label='Errors')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Z estimation error (m)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_z_error.png', dpi=300)

# plt.figure()
# plt.plot(ground_truth_position[:,5], 'g', label='Ground Truth')
# plt.plot(estimate_pos[:,5], 'b', label='Estimation')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Yaw (rad)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_comparison_yaw.png', dpi=300)

# plt.figure()
# plt.plot(np.abs(estimate_pos[:,5] - ground_truth_position[:,5]), label='Errors')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Yaw estimation error (rad)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_yaw_error.png', dpi=300)

# plt.figure()
# plt.plot(ground_truth_position[:,3], 'g', label='Ground Truth')
# plt.plot(estimate_pos[:,3], 'b', label='Estimation')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Roll (rad)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_comparison_roll.png', dpi=300)

# plt.figure()
# plt.plot(np.abs(estimate_pos[:,3] - ground_truth_position[:,3]), label='Errors')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Roll estimation error (rad)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_roll_error.png', dpi=300)

# plt.figure()
# plt.plot(ground_truth_position[:,4], 'g', label='Ground Truth')
# plt.plot(estimate_pos[:,4], 'b', label='Estimation')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Pitch (rad)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_comparison_pitch.png', dpi=300)

# plt.figure()
# plt.plot(np.abs(estimate_pos[:,4] - ground_truth_position[:,4]), label='Errors')
# plt.xlabel('Time step', fontdict=font)
# plt.ylabel('Pitch estimation error (rad)', fontdict=font)
# plt.legend()
# plt.savefig('estimation_pitch_error.png', dpi=300)


font = {'family': 'serif', 'weight': 'normal', 'size': 12}

plt.figure()
plt.plot(ground_truth_position[:,0], 'g', label='Ground Truth')
plt.plot(ref_states[:,0], 'b', label='Reference')
# plt.ylim([])
plt.xlabel('Time step', fontdict=font)
plt.ylabel('X coordinate (m)', fontdict=font)
plt.legend()
plt.savefig('tracking_comparison_x.png', dpi=300)

plt.figure()
plt.plot(ground_truth_position[:,1], 'g', label='Ground Truth')
plt.plot(ref_states[:,1], 'b', label='Reference')
# plt.ylim([])
plt.xlabel('Time step', fontdict=font)
plt.ylabel('Y coordinate (m)', fontdict=font)
plt.legend()
plt.savefig('tracking_comparison_y.png', dpi=300)

plt.figure()
plt.plot(ground_truth_position[:,2], 'g', label='Ground Truth')
plt.plot(ref_states[:,2], 'b', label='Reference')
# plt.ylim([])
plt.xlabel('Time step', fontdict=font)
plt.ylabel('Z coordinate (m)', fontdict=font)
plt.legend()
plt.savefig('tracking_comparison_z.png', dpi=300)

plt.figure()
plt.plot(ground_truth_position[:,5], 'g', label='Ground Truth')
plt.plot(ref_states[:,3], 'b', label='Reference')
# plt.ylim([])
plt.xlabel('Time step', fontdict=font)
plt.ylabel('Yaw coordinate (m)', fontdict=font)
plt.legend()
plt.savefig('tracking_comparison_yaw.png', dpi=300)

plt.figure()
plt.plot(ground_truth_position[:,1], 'g', label='Ground Truth')
plt.plot(ref_states[:,1], 'b', label='Reference')
plt.plot(averaged_states, 'r', label='Averaged')
# plt.ylim([])
plt.xlabel('Time step', fontdict=font)
plt.ylabel('Y coordinate (m)', fontdict=font)
plt.legend()
plt.savefig('tracking_comparison_Y.png', dpi=300)

plt.show()